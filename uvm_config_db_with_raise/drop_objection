`include "uvm_macros.svh"
import uvm_pkg::*;

class comp1 extends uvm_component;
  `uvm_component_utils(comp1)
  
  int data1 ;
  
  function new (string path = "comp1" , uvm_component parent = null);
    super.new (path , parent);
  endfunction
  
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#(int):: get(null, "uvm_test_top", "data", data1))
      `uvm_error("ENV", "Couldn't access the value of DATA");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    phase.raise_objection(this);
    `uvm_info ("COMP1" , $sformatf("value of data1 : %d",data1) , UVM_NONE);
    phase.drop_objection(this);
  endtask
  endclass 

//////////////////////////////

class comp2 extends uvm_component;
  `uvm_component_utils(comp2)
  
  int data2 ;
  
  function new (string path = "comp2" , uvm_component parent = null);
    super.new (path , parent);
  endfunction
  
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);
    if(!uvm_config_db#(int):: get(null, "uvm_test_top", "data", data2))
      `uvm_error("ENV", "Couldn't access the value of DATA");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    phase.raise_objection(this);
    `uvm_info ("COMP2" , $sformatf("value of data2 : %d",data2) , UVM_NONE);
    phase.drop_objection(this);
  endtask
  endclass 

///////////////////////////

class agent extends uvm_agent;
  `uvm_component_utils(agent)
  
  comp1 c1;
  comp2 c2;
  
  function new (string path = "agent" , uvm_component parent = null);
    super.new (path , parent);
  endfunction
  
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);
    c1 = comp1 :: type_id :: create ("c1" , this);
    c2 = comp2 :: type_id :: create ("c2" , this);
    
  endfunction
  endclass

/////////////////////////////

class env extends uvm_env;
  `uvm_component_utils(env)
  
  agent a;
  
  function new (string path = "agent" , uvm_component parent = null);
    super.new (path , parent);
  endfunction
  
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);
    a = agent :: type_id :: create ("a" , this);    
  endfunction
  endclass




class test extends uvm_test;
  `uvm_component_utils(test)
  
  env e;
  
  function new (string path = "test" , uvm_component parent = null);
    super.new (path , parent);
  endfunction
  
  virtual function void build_phase (uvm_phase phase);
    super.build_phase(phase);
    e = env :: type_id :: create ("e" , this);
  endfunction
  endclass

/////////////////////

module tb;
  int data = 200;
  initial begin
    uvm_config_db #(int):: set(null , "uvm_test_top" , "data" , data);
    run_test("test");
    end
  
endmodule
