///////////////////////// DUT /////////////////////////////////////////////////
module add(
  input bit [3:0] a,b,
  output bit [4:0] y);
  assign y = a+b;
endmodule

////////////

interface add_if();
  logic [3:0] a;
  logic [3:0] b;
  logic [4:0] y;
endinterface

/////////////////////////////////////////////////////////////////////////////

`include "uvm_macros.svh"
import uvm_pkg::*;

class transaction extends uvm_sequence_item();
  randc bit [3:0] a,b;
  bit [4:0] y;
  
  function new (string path = "transaction");
    super.new(path);
  endfunction
  
  `uvm_object_utils_begin(transaction)
  `uvm_field_int(a , UVM_DEFAULT)
  `uvm_field_int(b , UVM_DEFAULT)
  `uvm_field_int(y , UVM_DEFAULT)
  `uvm_object_utils_end
endclass

////////////////////////////

class seq extends uvm_sequence #(transaction);
  transaction trans;
  
  `uvm_object_utils(seq)
  
  function new (string path = "seq");
    super.new(path);
  endfunction
  
  task body();
    trans = transaction :: type_id :: create("trans");
    repeat (10) begin
    start_item(trans);
    trans.randomize();
    `uvm_info("SEQ",$sformatf ("A : %d , B :%d", trans.a , trans.b), UVM_NONE);
    finish_item(trans);
    end
  endtask
endclass

////////////////////////////

class drv extends uvm_driver #(transaction);  
  `uvm_component_utils(drv)
  
  function new (string path = "drv" , uvm_component parent = null);
    super.new(path , parent);
  endfunction
  
  transaction t;
  virtual add_if aif;
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    t = transaction :: type_id :: create("t");
    if(!uvm_config_db #(virtual add_if) :: get(this , "" ,"aif" , aif))
    `uvm_error ("DRV" , "unable to access config_db");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    forever begin
    seq_item_port.get_next_item(t);
      aif.a <= t.a;
      aif.b <= t.b;
    seq_item_port.item_done();
      #10;
    end
  endtask
endclass

///////////////////

class mon extends uvm_monitor; 
  `uvm_component_utils(mon)
  uvm_analysis_port #(transaction) send;
  
  function new (string path = "mon" , uvm_component parent = null);
    super.new(path , parent);
    send = new("send" , this);
  endfunction
  
  transaction t;
  virtual add_if aif;
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    t = transaction :: type_id :: create("t", this);
    if(!uvm_config_db #(virtual add_if) :: get(this , "" ,"aif" , aif))
    `uvm_error ("MONITOR" , "unable to access config_db");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    forever begin
      #10;
      t.a <= aif.a;
      t.b <= aif.b;
      t.y <= aif.y;
      `uvm_info("MONITOR" , $sformatf("[DATA sent to SCOREBOARD] A:%d , B:%d , Y:%d",t.a , t.b , t.y), UVM_NONE);
      send.write(t);
    end
  endtask
endclass

////////////////////////////

class scoreboard extends uvm_scoreboard;
`uvm_component_utils(scoreboard)
 
uvm_analysis_imp #(transaction,scoreboard) recv;
 
transaction tr;
 
  function new(input string path = "scoreboard", uvm_component parent = null);
    super.new(path, parent);
    recv = new("recv", this);
  endfunction
 
  virtual function void build_phase(uvm_phase phase);
  super.build_phase(phase);
    tr = transaction::type_id::create("tr");
  endfunction
 
  virtual function void write(input transaction t);
   tr = t;
  `uvm_info("SCO",$sformatf("Data rcvd from Monitor a: %0d , b : %0d and y : %0d",tr.a,tr.b,tr.y), UVM_NONE);
  
    if(tr.y == tr.a + tr.b)
       `uvm_info("SCO","Test Passed", UVM_NONE)
   else
       `uvm_info("SCO","Test Failed", UVM_NONE);
   endfunction
endclass
    
//////////////////////////////////
  
class agent extends uvm_agent; 
  `uvm_component_utils(agent)
  
  function new (string path = "agent" , uvm_component parent = null);
    super.new(path , parent);
  endfunction
  
  drv d;
  mon m;
  uvm_sequencer #(transaction) seqr;
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    d = drv :: type_id :: create("d", this);
    m = mon :: type_id :: create("m", this);
    seqr = uvm_sequencer #(transaction) :: type_id :: create("seqr", this);
  endfunction
  
  virtual function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    d.seq_item_port.connect(seqr.seq_item_export);
  endfunction
endclass
                        
////////////////////////////

class env extends uvm_env;
  `uvm_component_utils(env)
  
  function new (string path = "env", uvm_component parent = null);
    super.new(path , parent);
  endfunction
  
  agent a;
  scoreboard s;
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    a = agent :: type_id :: create("a" , this);
    s = scoreboard :: type_id :: create("s", this);
  endfunction
  
  virtual function void connect_phase(uvm_phase phase);
    super.connect_phase(phase);
    a.m.send.connect(s.recv);
  endfunction
endclass
                        
////////////////////////////

class test extends uvm_test;
  `uvm_component_utils(test)
  
  function new (string path = "test" , uvm_component parent = null);
    super.new(path , parent);
  endfunction
  seq se;
  env e;
  
  virtual function void build_phase(uvm_phase phase);
    super.build_phase(phase);
    e = env :: type_id :: create("e" , this);
    se = seq :: type_id :: create("se");
  endfunction
  
  virtual task run_phase(uvm_phase phase);
    phase.raise_objection(this);
      se.start(e.a.seqr);
    #50;
    phase.drop_objection(this);
  endtask
endclass
                        
///////////////////////////
     
module add_tb();
 
add_if aif();
 
add dut (.a(aif.a), .b(aif.b), .y(aif.y));
 
initial begin
$dumpfile("dump.vcd");
$dumpvars;
end
  
initial begin  
uvm_config_db #(virtual add_if)::set(null, "uvm_test_top.e.a*", "aif", aif);
run_test("test");
end 
endmodule
